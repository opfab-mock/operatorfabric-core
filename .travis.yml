os: linux
dist: xenial
addons:
    sonarcloud:
        organization: "opfab-mock"
        token:
            secure: "h28FCho3F42lakItF1yVFR8tW8P3RPYmGApp6dfKx8RcD2CW6FOwFV+fDtoc8nRFvK448EBmz8fuCfA6Xuw39jo1EatJojesUMMWdAzFDWlVATAfU58G/40BeeCwsj9er7kHCCmGrVwHxf4zob9NxoMqacqwv4ywzhvDK2C2CmxlIMbbGVqQKvRh8gV4XI0qHDme1NpZIQrQFqGcQ+ChmBak3VCQwtfSYYujoVC93iV8XI4J+F0kkg+lMLtPPZ39tM1dTCFqBR+0yrEZcO8IDcToKyRYg0h6daJu7OMjAjobtMJBDUo9N4OAevArwltVqvOdy1hDvUXpYn+TPY+okyeLWgM6vtI5T+XxfRMAK5oYg4Sc8z/ip71kiZzuS9nftmDywpfyYB8kqYM94LFHA9Evmi7gBQ1kKJVw2qcOUxhcnZ5oQJD0scHMlW1g5HiVEZMpoZjUm/GRSY5GeBt4KU5fGqtU5iKvQSJvT/H6h9L/MG+T+zfNlxEyBiJdDGhguD+omsJh2ZFvoAcHDKGeEsfCbPLGu3YzoLohofvds94pl/Ai8108xZW/VI6PpJSbU20RgHs+tPnsbtQdN5LNNywoGNcWHHbIgSc4ExZMIpxXuxPKeO/GjPw8Ou2PQkoj5aK0TnMnYyz+vo9PQNdfQ2lvTrc5t1m+vqRQFmDqFyA="
services:
  - docker
env:
  - NODE_VERSION="v10.16.3"
language: java
# To avoid duplicate builds generated by tags
if: tag IS blank
before_install:
  - export OF_VERSION=$(<VERSION)
  - export GRADLE_OPTS="-XX:MaxMetaspaceSize=512m -Xmx1024m"
  - ./CICD/travis/check_version.sh --branch $TRAVIS_BRANCH --version $OF_VERSION
  - alternatives --display java
  - nvm install $NODE_VERSION
install:
  # first install needs to remove ~/.sdkman (empty in our case because created by cache step) otherwise SdkMan is not installed
  # then install sdkman
  # configures by default SdkMan to use new installed java directly and updates itself if needed.
  - if [ -z "$(ls -A $HOME/.sdkman)" ]; then
    rm -fr $HOME/.sdkman ;
    curl -s "https://get.sdkman.io" | bash ;
    echo sdkman_auto_answer=true > ~/.sdkman/etc/config ;
    echo sdkman_auto_selfupdate=true >> $HOME/.sdkman/etc/config ;
    fi
  # needed in order to have sdk available into the current environment
  - source "$HOME/.sdkman/bin/sdkman-init.sh" ;
  - EXPECTED_NPM_VERSION="6.4.1"
  - CurrentNpmVersion="$(npm -version)"
  - if [ "${CurrentNpmVersion}" != "${EXPECTED_NPM_VERSION}" ] ; then npm i -g npm@${EXPECTED_NPM_VERSION} ; fi
  # Should be synch with ${OF_HOME}/bin/load_environment_light.sh. It's the first part of the sdk reference without vendor name
  # for example the current configured in sdk has the following reference `8.0.272-zulu`
  # the value of the following variable is `8.0.272` and its vendor name part is `-zulu`
  - CURRENT_JDK_VERSION="8.0.272"
  # need to substitute last dot by an underscore. Example value for the following: "1.8.0_272"
  # for java version higher than 8 the prefix `1.` should be removed
  - FULL_JDK_VERSION="1.${CURRENT_JDK_VERSION%.*}${CURRENT_JDK_VERSION/*./_}"
  # example value for the following: "8.0.272-zulu"
  - JDK_VERSION_4_SDKMAN="${CURRENT_JDK_VERSION}-zulu"
  # Use javac because the prompt is simpler than the java one
  # skips the beginning should return 1.8.0_272. Here redirection '2>&1' needed to load prompt value otherwise variable is empty
  - CurrentJavacVersionNumber="$(javac -version 2>&1 | cut -d ' ' -f 2)"
  # if javac version is different than expected then asks sdkman to use expected java version or install it if necessary
  # if sdkman can't use the expected java version then asks sdkman to install it. Sdkman is configured to use it as default (line 26)
  - if [ "${CurrentJavacVersionNumber}" != "${FULL_JDK_VERSION}" ] ;
    then
    if ! sdk use java "${JDK_VERSION_4_SDKMAN}" ;
    then
    sdk install java "${JDK_VERSION_4_SDKMAN}" ;
    fi ;
    fi
  - sudo apt-get install realpath
  # displays versions of useful tools for visual checks
  - npm -version
  - sdk version
  - javac -version
jobs:
  include:
    - stage: test
      script:
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml up -d
        - ./gradlew --build-cache copyDependencies test
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml down
    - stage: test-sonar
      script:
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml up -d
        - ./gradlew --build-cache copyDependencies test jacocoTestReport
        # [OC-865] Dropping dependency messing with typescript version as a workaround until sonar bug is fixed
        # See https://github.com/SonarSource/SonarJS/issues/1928 and https://community.sonarsource.com/t/error-about-unsupported-ts-version-while-project-is-using-supported-version/15776
        - rm -r ui/main/node_modules/@compodoc/ngd-core
        - rm -r ui/main/node_modules/ts-simple-ast
        - sonar-scanner
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml down
    - stage: doc
      script:
        - ./gradlew --build-cache generateSwaggerUI asciidoctor
        - ./CICD/travis/upload_doc.sh
    - stage: doc-dry-run
      script:
        - ./gradlew --build-cache generateSwaggerUI asciidoctor
    - stage: docker-push-version
      script:
        - echo preparing images for version $OF_VERSION
        - docker login --username ${DOCKER_CLOUD_USER} --password ${DOCKER_CLOUD_PWD}
        - ./gradlew --build-cache copyWorkingDir dockerPush${OF_VERSION} -x test
        - docker image ls -a|grep lfeoperatorfabric
    - stage: docker-push-latest
      script:
        - echo preparing images for version $OF_VERSION
        - docker login --username ${DOCKER_CLOUD_USER} --password ${DOCKER_CLOUD_PWD}
        - ./gradlew --build-cache copyWorkingDir dockerPushLatest -x test
        - docker image ls -a|grep lfeoperatorfabric
    - stage: docker-tag-version
      script:
        - echo preparing images for version $OF_VERSION
        - ./gradlew --build-cache copyWorkingDir dockerTag${OF_VERSION} -x test
        - docker image ls -a|grep lfeoperatorfabric
stages:
  # Note: The condition on type is necessary to exclude PRs because their base branch is usually develop
  - name: test
    if: type = pull_request AND head_repo != opfab/operatorfabric-core
  - name: test-sonar
    if: NOT (type = pull_request AND head_repo != opfab/operatorfabric-core)
  - name: doc
    if: ((((type = cron OR commit_message =~ ci_documentation) AND branch = develop) OR branch = master) AND NOT type = pull_request)
  - name: doc-dry-run
    if: (branch =~ .+release$) OR (NOT (branch IN (master,develop)) AND commit_message =~ ci_documentation)
  - name: docker-push-version
    if: (((type = cron OR commit_message =~ ci_docker) AND branch = develop) OR branch = master) AND NOT type = pull_request
  - name: docker-push-latest
    if: branch = master AND commit_message =~ ci_latest AND NOT type = pull_request
  - name: docker-tag-version
    if: (branch =~ .+release$) OR (NOT (branch IN (master,develop)) AND commit_message =~ ci_docker)
before_cache:
  # cleanup gradle caches
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  bundler: true
  directories:
    # caches gradle caches
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.gradle/dependency-check-data/
    # cache ui dependencies
    - ui/main/nodes_modules
    - $HOME/.sdkman
